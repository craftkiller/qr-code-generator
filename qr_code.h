#pragma once
#include <string>
#include <vector>
#include "types.h"
#include "bit_grid.h"

using namespace std;
#define ALPHANUMERIC_MODE (0x02)
#define NUMERIC_MODE (0x01)
#define BINARY_MODE (0x04)
#define JAPANESE_MODE (0x08)

enum correction_level {L, M, Q, H};

//From http://blog.qr4.nl/page/QR-Code-Data-Capacity.aspx
// data_bits[version_number][L, M, Q, or H]
const fu32 data_bits[][4] = {
    {0,0,0,0}, //Version numbers start at 1
    {152, 128, 104, 72},
    {272, 224, 176, 128},
    {440, 352, 272, 208},
    {640, 512, 384, 288},
    {864, 688, 496, 368},
    {1088, 864, 608, 480},
    {1248, 992, 704, 528},
    {1552, 1232, 880, 688},
    {1856, 1456, 1056, 800},
    {2192, 1728, 1232, 976},
    {2592, 2032, 1440, 1120},
    {2960, 2320, 1648, 1264},
    {3424, 2672, 1952, 1440},
    {3688, 2920, 2088, 1576},
    {4184, 3320, 2360, 1784},
    {4712, 3624, 2600, 2024},
    {5176, 4056, 2936, 2264},
    {5768, 4504, 3176, 2504},
    {6360, 5016, 3560, 2728},
    {6888, 5352, 3880, 3080},
    {7456, 5712, 4096, 3248},
    {8048, 6256, 4544, 3536},
    {8752, 6880, 4912, 3712},
    {9392, 7312, 5312, 4112},
    {10208, 8000, 5744, 4304},
    {10960, 8496, 6032, 4768},
    {11744, 9024, 6464, 5024},
    {12248, 9544, 6968, 5288},
    {13048, 10136, 7288, 5608},
    {13880, 10984, 7880, 5960},
    {14744, 11640, 8264, 6344},
    {15640, 12328, 8920, 6760},
    {16568, 13048, 9368, 7208},
    {17528, 13800, 9848, 7688},
    {18448, 14496, 10288, 7888},
    {19472, 15312, 10832, 8432},
    {20528, 15936, 11408, 8768},
    {21616, 16816, 12016, 9136},
    {22496, 17728, 12656, 9776},
    {23648, 18672, 13328, 10208}};

struct error_correction_size
{
    fu8 ec_code_words_per_block;
    fu8 block_1_count;
    fu8 block_1_data_code_words;
    fu8 block_2_count;
    fu8 block_2_data_code_words;
};

//From: http://www.thonky.com/qr-code-tutorial/error-correction-table/
//ec_table[version_number][L, M, Q, or H]
///@todo finish the table
const error_correction_size ec_table[][4] = {
    { {0,0,0,0,0}, {0,0,0,0,0}, {0,0,0,0,0}, {0,0,0,0,0} }, //Version starts at 1
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
    { {7,1,19,0,0}, {10,1,16,0,0}, {13,1,13,0,0}, {17,1,9,0,0} },
};

//from http://www.thonky.com/qr-code-tutorial/part-3-mask-pattern/
//type_information_bits[L, M, Q, or H][mask pattern 0-7]
const string type_information_bits[][8] = {
    { //L
        "111011111000100",
        "111001011110011",
        "111110110101010",
        "111100010011101",
        "110011000101111",
        "110001100011000",
        "110110001000001",
        "110100101110110"
    },
    { //M
        "101010000010010",
        "101000100100101",
        "101111001111100",
        "101101101001011",
        "100010111111001",
        "100000011001110",
        "100111110010111",
        "100101010100000"
    },
    { //Q
        "011010101011111",
        "011000001101000",
        "011111100110001",
        "011101000000110",
        "010010010110100",
        "010000110000011",
        "010111011011010",
        "010101111101101"
    },
    { //H
        "001011010001001",
        "001001110111110",
        "001110011100111",
        "001100111010000",
        "000011101100010",
        "000001001010101",
        "000110100001100",
        "000100000111011"
    }
};

class qr_code
{
  public:
    qr_code(const string & input, fu8 _mode = ALPHANUMERIC_MODE, fu8 _version = 1, correction_level _error = Q);
    ~qr_code();

    const bit_grid& get_grid() const {return generated_grid;}
  private:
    vector<u8> generate_binary_string();
    vector<u8> generate_data_string();
    vector<u8> generate_ec_string(const vector<u8> & data);
    bit_grid generate_bit_grid(const vector<u8> & data, const u8 mask_pattern);
    fu8 get_length_of_size();
    fu8 get_image_dimension();
    bool apply_mask(bool original_color, u8 mask, fs16 x, fs16 y);
    string encoding_string;
    fu8 mode;
    fu8 version;
    fu8 mask_pattern;
    bit_grid generated_grid;
    correction_level error;
};

